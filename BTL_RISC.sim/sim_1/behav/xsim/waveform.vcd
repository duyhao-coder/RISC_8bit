$date
   Sun Apr 13 09:04:55 2025
$end
$version
  2018.2
$end
$timescale
  1ps
$end
$scope module main_tb $end
$scope module UUT $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 # pc_addr [4:0] $end
$var wire 5 $ mux_address_out [4:0] $end
$var wire 8 % data_bus [7:0] $end
$var wire 8 & instruction [7:0] $end
$var wire 3 ' opcode [2:0] $end
$var wire 5 ( operand [4:0] $end
$var wire 8 ) alu_out [7:0] $end
$var wire 8 * ac_out [7:0] $end
$var wire 1 + is_zero $end
$var wire 1 , sel $end
$var wire 1 - rd $end
$var wire 1 . wr $end
$var wire 1 / ld_ir $end
$var wire 1 0 halt $end
$var wire 1 1 inc_pc $end
$var wire 1 2 ld_ac $end
$var wire 1 3 ld_pc $end
$var wire 1 4 data_e $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 3 load $end
$var wire 1 1 enable $end
$var wire 5 ( pc_in [4:0] $end
$var reg 5 5 pc_out [4:0] $end
$upscope $end
$scope module addr_mux $end
$var wire 1 , select $end
$var wire 5 # pc_in [4:0] $end
$var wire 5 ( operand_address [4:0] $end
$var reg 5 6 Mux_add_out [4:0] $end
$var parameter 32 7 WIDTH [31:0] $end
$upscope $end
$scope module memory $end
$var wire 1 ! clk $end
$var wire 1 . wr $end
$var wire 1 - rd $end
$var wire 5 $ addr [4:0] $end
$var wire 8 % data [7:0] $end
$var reg 8 8 data_out [7:0] $end
$upscope $end
$scope module ir $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 / load $end
$var wire 8 % reg_in [7:0] $end
$var reg 8 9 reg_out [7:0] $end
$upscope $end
$scope module ac $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 2 load $end
$var wire 8 ) reg_in [7:0] $end
$var reg 8 : reg_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 * inA [7:0] $end
$var wire 8 % inB [7:0] $end
$var wire 3 ' opcode [2:0] $end
$var reg 8 ; out_ALU [7:0] $end
$var reg 1 < a_is_zero $end
$upscope $end
$scope module ctrl $end
$var wire 3 ' opcode [2:0] $end
$var wire 3 = phase [2:0] $end
$var wire 1 " reset $end
$var wire 1 ! clk $end
$var wire 1 + zero $end
$var reg 1 > sel $end
$var reg 1 ? rd $end
$var reg 1 @ ld_ir $end
$var reg 1 A halt $end
$var reg 1 B inc_pc $end
$var reg 1 C ld_ac $end
$var reg 1 D ld_pc $end
$var reg 1 E wr $end
$var reg 1 F date_e $end
$var reg 1 G ALUOP $end
$var reg 1 H SKZ $end
$var reg 1 I JMP $end
$var reg 1 J STO $end
$var reg 1 K HALT $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b0 #
b0 $
bz %
bx &
bx '
bx (
bx )
bx *
0+
0,
0-
0.
0/
00
01
02
03
04
b0 5
b0 6
b101 7
bx 8
bx 9
bx :
bx ;
0<
b0 =
0>
0?
0@
0A
0B
0C
0D
0E
0F
xG
xH
xI
xJ
xK
$end
#50000
1!
0"
bx $
1,
bx 6
1>
#100000
0!
#150000
1!
#200000
0!
#250000
1!
